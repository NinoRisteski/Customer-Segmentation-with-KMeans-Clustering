# -*- coding: utf-8 -*-
"""Customer Segmentation with KMeans Clustering.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Y9FMaWkYOFrhKmr6D0jsHtyHA__Q4GWD

**Import Dependencies**
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans

"""**Data Collection and Analysis**"""

# Loading csv data to DataFrame
customer_data = pd.read_csv('/content/Mall_Customers.csv')

# First 5 rows of DataFrame
customer_data.head()

# Finding the number of rows and columns
customer_data.shape

# Information about the dataset
customer_data.info()

# Checking for missing values
customer_data.isnull().sum()

"""**Choosing the Annual Income column and Spending Score column**"""

X = customer_data.iloc[:, [3, 4]].values

"""**Choosing the Number of Clusters**

WCSS - Within Clusters Sum of Squares
"""

# Finding WCSS value for different number of clusters

wcss = []

for i in range(1, 11):
  kmeans = KMeans(n_clusters=i, init='k-means++', random_state=44)
  kmeans.fit(X)
  
  wcss.append(kmeans.inertia_)

# Plot an elbow graph
sns.set()
plt.plot(range(1,11), wcss)
plt.title('The Elbow Point Graph')
plt.xlabel('Number of Clusters')
plt.ylabel('WCSS')
plt.show()

"""Optimum Number of Clusters = 5

**Training the K-Means Clustering Model**
"""

kmeans = KMeans(n_clusters=5, init='k-means++', random_state=0)

# Return a label for each data point on their clusters
Y = kmeans.fit_predict(X)

print(Y)

"""5 clusters = 0, 1, 2, 3, 4

**Visualizing All The Clusters**
"""

# Plotting all clusters

plt.figure(figsize=(8,8))
plt.scatter(X[Y==0,0], X[Y==0,1], s=50, c='green', label='Cluster 1')
plt.scatter(X[Y==1,0], X[Y==1,1], s=50, c='red', label='Cluster 2')
plt.scatter(X[Y==2,0], X[Y==2,1], s=50, c='blue', label='Cluster 3')
plt.scatter(X[Y==3,0], X[Y==3,1], s=50, c='yellow', label='Cluster 4')
plt.scatter(X[Y==4,0], X[Y==4,1], s=50, c='purple', label='Cluster 5')

# Plot the centroids
plt.scatter(kmeans.cluster_centers_[:,0], kmeans.cluster_centers_[:,1], s=100, c='cyan', label='Centroids')

plt.title('Customer Groups')
plt.xlabel('Annual Income')
plt.ylabel('Spending Score')
plt.show()

